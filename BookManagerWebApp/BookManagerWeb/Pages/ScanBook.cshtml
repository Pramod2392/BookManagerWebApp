@page
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@model BookManagerWeb.Pages.ScanBookModel
@{
}

<h2>Scan ISBN Code</h2>

<div id="interactive" class="viewport"></div>


<div id="popup" style="display: none;">
    <label class="form-label">ISBN: </label>
    <input type="text" disabled="disabled" id="popupIsbn" class="text text-secondary" />
    <br />

    <label class="form-label">Title: </label>
    <input type="text" disabled="disabled" id="popupTitle" class="text text-primary" />
    <br />

    <input type="text" disabled="disabled" id="bookTitle" class="text text-primary" />
    <br />

    <input type="text" disabled="disabled" id="bookISBN" class="text text-primary" />
    <br />

    <img id="popupImage" />
    <br />

    <button class="btn btn-primary" onclick="AddNewBook()">Add Book</button>
    <button class="btn-close" onclick="closePopup()">Close</button>
</div>

<form>
    <input name="__RequestVerificationToken" type="hidden" value="@Antiforgery.GetTokens(HttpContext).RequestToken" />
</form>

<script src="https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js"></script>

<script>
    let lastScannedISBN = null;
    let scanCount = 0;
    const scanThreshold = 3; // Require the same ISBN to be detected 3 times in a row

    // Initialize QuaggaJS to scan EAN-13 (ISBN)
    Quagga.init({
        inputStream: {
            type: "LiveStream",
            target: document.querySelector('#interactive'),
            constraints: {
                width: 640,
                height: 480,
                facingMode: "environment" // Rear camera
            }
        },
        decoder: {
            readers: ["ean_reader"/*,  "ean_8_reader", "code_128_reader" */] // EAN-13 for ISBNs
        }
    }, function (err) {
        if (err) {
            console.error(err);
            return;
        }
        Quagga.start();
    });

    Quagga.onDetected(function (result) {
        var isbn = result.codeResult.code;

        // Check if this is the same value as last time
        if (isbn.length == 13 && isbn.charAt(0) == '9')
        {
            if (isbn === lastScannedISBN) {
                scanCount++;
            } else {
                lastScannedISBN = isbn;
                scanCount = 1;
            }
        }


        // Confirm the scan only if the same ISBN is detected multiple times
        if (scanCount >= scanThreshold) {
            Quagga.stop(); // Stop scanning once we have a stable result

            fetchData(isbn);

            
            // sendIsbnToApi(isbn);
        }
    });

    function sendIsbnToApi(isbn) {
        fetch('@Url.Page("/ScanBook", "OnPost")', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ isbn: isbn })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log('ISBN successfully sent.');
                } else {
                    console.log('Error sending ISBN.');
                }
            })
            .catch((error) => console.error('Error:', error));
    }


    // window.onload = function () {
    //     fetchData();
    // };

    function fetchData(isbn) {
        const url = `/ScanBook?handler=Data&isbn=${encodeURIComponent(isbn)}`;
        fetch(url)
            .then(response => response.json())
            .then(data => {

                document.getElementById("popupIsbn").value = "Scanned ISBN: " + isbn;
                document.getElementById("popupTitle").value = "Title: " + data.title;
                document.getElementById("popupImage").src = data.imageSource;
                document.getElementById("popup").style.display = "block";
                document.getElementById("interactive").style.display = "none";
                
                document.getElementById("bookTitle").value = data.title;
                document.getElementById("bookISBN").value = isbn;
            })
            .catch(error => console.error('Error fetching data:', error));
    }

    function AddNewBook() {
        // const url = `/?handler=OnPostAsync`;
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        fetch(`@Url.Page("/ScanBook")`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({ isbn: document.getElementById("bookISBN").value, title: document.getElementById("bookTitle").value, imageSource: document.getElementById("popupImage").src })
        })
            .then(response => {
                if (response.redirected) {
                    window.location.href = response.url;
                }
            });
        // .then(response => response.json())
        // .then(data => {
        //     if (data.url) {
        //         window.location.href = data.url; // Redirect to the specified URL
        //     });
    }

    function closePopup() {
        document.getElementById("popup").style.display = "none";
    }

</script>
